import React, {useCallback, useEffect, useState} from 'react';
import {ScrollView, StyleSheet, Text, View ,SafeAreaView , TextInput ,TouchableOpacity , Button } from 'react-native';
import * as anchor from '@coral-xyz/anchor';
import {PublicKey} from '@solana/web3.js';
import {Section} from '../components/Section';
import ConnectButton from '../components/ConnectButton';
import AccountInfo from '../components/AccountInfo';
import {
  useAuthorization,
  Account,
} from '../components/providers/AuthorizationProvider';
import {Program} from '@coral-xyz/anchor';
import {useConnection} from '../components/providers/ConnectionProvider';
import DisconnectButton from '../components/DisconnectButton';
import RequestAirdropButton from '../components/RequestAirdropButton';
import {ProgramSource} from '../utils/type';
import {useProgram} from '../hooks/useProgram';
import {useAnchorWallet} from '../hooks/useAnchorWallet';
import Collapsible from 'react-native-collapsible';
import {
 {{#each instructions}}
 Call_{{name}}_Instruction,
 {{#each args}}
 {{name}}_for_{{../name}},
 {{name}}handler_for_{{../name}},
 {{/each}}
 {{/each}}
} 
from '../components/CallInstructionComponents/CallInstructions'

export default function MainScreen() {
  const [collapsed, setCollapsed] = useState(false);
  const [manualPublicKey , setManualPublicKey] = useState("")
  const {connection} = useConnection();
  const {authorizeSession, selectedAccount} = useAuthorization();
  const [balance, setBalance] = useState<number | null>(null);
  const anchorWallet = useAnchorWallet(authorizeSession, selectedAccount);
  const {program, programId} = useProgram(
    connection,
    anchorWallet,
  );

  const fetchAndUpdateBalance = useCallback(
    async (account: Account) => {
      console.log('Fetching balance for: ' + account.publicKey);
      const fetchedBalance = await connection.getBalance(account.publicKey);
      console.log('Balance fetched: ' + fetchedBalance);
      setBalance(fetchedBalance);
    },
    [connection],
  );

  useEffect(() => {
    if (!selectedAccount) {
      return;
    }
    fetchAndUpdateBalance(selectedAccount);
  }, [fetchAndUpdateBalance, selectedAccount]);

    useEffect(() => {
      if (!program) {
        return;
      }
    }, [program]);

   const toggleExpand = () => {
    setCollapsed(!collapsed);
  };

  const manualPublicKeyHandler = (e:any) => {
    setManualPublicKey(e.target.value)
  }

  return (
    <>
      <View style={styles.mainContainer}>
        <ScrollView contentContainerStyle={styles.scrollContainer}>
          {selectedAccount ? (
            <>
            <SafeAreaView>
              <ScrollView style={styles.scroolView}>
              <Section title="Wallet Info">
                <AccountInfo
                  selectedAccount={selectedAccount}
                  balance={balance}
                />
                <RequestAirdropButton
                  selectedAccount={selectedAccount}
                  onAirdropComplete={async (account: Account) =>
                    await fetchAndUpdateBalance(account)
                  }
                />

                  <Text style={
                    {marginTop : 15 , fontSize : 20 , color : "white" , fontWeight : "bold"}
                    }>
                    Program Id Info
                  </Text>

                 <TouchableOpacity
                      onPress={() => toggleExpand()}
                      style={
                        {marginTop: 20 , backgroundColor : "grey"}
                        }>
                      <Text style={
                        {fontSize: 16, color: 'white' , padding : 5}
                        }>
                        Enter PublicKey of Your Program
                      </Text>
                      
                    </TouchableOpacity>

                 <Collapsible collapsed={!collapsed}>
                      <View
                        style={
                          {
                          marginTop: 10,
                        }
                        }>
                        <TextInput
                        placeholder='Enter your Program PublicKey....'
                        placeholderTextColor="grey"
                          style={
                            {
                            backgroundColor: 'white',
                            paddingHorizontal: 10,
                            height: 40,
                            fontSize : 15,
                            color : "black"
                          }
                          }
                        value={manualPublicKey}
                        onChange={manualPublicKeyHandler}
                        />
                          <Button
                          title='Set Now'
                          />
                          
                      </View>
                    </Collapsible>

                    <Text style={
                     {marginTop : 20 , fontSize : 20 , color : "white" , fontWeight : "bold"}
                    }>
                      Call Instructions from your IDL
                    </Text>

                {{#each instructions}}
                {{#each args}}
                <View style={styles.button}>
                  <Text style={styles.text}>
                    {{../name}} Instruction
                  </Text>
                  <TextInput>
                    style={styles.input}
                    placeholder = {`Enter {{name}}`}
                    onChangeText= {
                  {{name}}handler_for_{{../name}}
                }
                value={
                  {{name}}_for_{{../name}}
                } 
                  </TextInput>
                </View>
                {{/each}}
                <View style={styles.button}>
                  <Call_{{name}}_Instruction
                  anchorWallet={anchorWallet}
                />
                </View>
                {{/each}}  

              </Section>
               </ScrollView>
              </SafeAreaView>
            </>
          ) : null}
        </ScrollView>
        {selectedAccount ? (
          <DisconnectButton title="Disconnect wallet" />
        ) : (
          <ConnectButton title="Connect wallet" />
        )}
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  mainContainer: {
    height: '100%',
    padding: 16,
    flex: 1,
  },
  scrollContainer: {
    height: '100%',
  },
  buttonGroup: {
    flexDirection: 'column',
    paddingVertical: 4,
  },
  scroolView: {
    marginBottom: 10,
  },
  textSubHeading : {
     textAlign : 'center',
    fontSize: 18,
    marginTop : 10,
    fontWeight: 'bold',
    color : 'white'
  },
   input: {
    height: 40,
    borderColor: 'white',
    borderWidth: 1,
    marginTop: 10,
    paddingHorizontal: 10,
    
  },
  button: {
    height: 40,
    marginTop: 20,
    borderRadius : 4,
  },
  text : {
    fontSize: 16,
    marginTop : 10,
    fontWeight: 'bold',
    color : 'white'
  },  
});
